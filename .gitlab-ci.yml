image: golang:1.19

stages:
  - build
  - publish
  - release

format:
  stage: build
  script:
    - test -z "$(gofmt -l ./)"

vet:
  stage: build
  script:
    - go vet -json ./... | tee vet-report.json
  artifacts:
    when: always
    paths:
      - vet-report.json
    expire_in: 1 hour

test:
  stage: build
  script:
    - go install gotest.tools/gotestsum@latest
    - gotestsum --junitfile build/test/report.xml --format testname
    - env
  artifacts:
    when: always
    paths:
      - build/test/*.xml
    reports:
      junit: build/test/*.xml

staticcheck:
  stage: build
  script:
    - go install honnef.co/go/tools/cmd/staticcheck@latest # ideally we should version pin
    - staticcheck ./...

golint:
  stage: build
  script:
    - go install golang.org/x/lint/golint@latest # ideally we should version pin
    - golint -set_exit_status ./...

build:
  stage: build
  script:
    - apt update && apt -y install zip
    - ./bld -c
  artifacts:
    paths:
      - build/bin/*

upload:
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG =~ /v\d+\.\d+\.\d+/
  script:
    - BASEURL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"
    - cd $CI_PROJECT_DIR/build/bin
    - |
      for f in `find * -type f`; do
        fields=(${f//\// })
        url="$BASEURL/${fields[0]}/$CI_COMMIT_TAG/${fields[1]}?select=package_file"
        echo "Uploading '$f' to '$url'..."
        curl -f --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $f $url
      done
